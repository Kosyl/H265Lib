#ifndef _LOGGER_DEFINITIONS_H_
#define _LOGGER_DEFINITIONS_H_

#include "Logger.h"

#define STRINGIZE(x) #x
#define PRINTVAR(x) STRINGIZE(x) ": " x

#define LOGPATH_FT "D:\txt\ft.txt"
#define LOGPATH_IT "D:\txt\it.txt"
#define LOGPATH_Q "D:\txt\q.txt"
#define LOGPATH_IQ "D:\txt\iq.txt"
#define LOGPATH_LP "D:\txt\lp.txt"
#define LOGPATH_LR "D:\txt\lr.txt"
#define LOGPATH_CP "D:\txt\cp.txt"
#define LOGPATH_CR "D:\txt\cr.txt"
#define LOGPATH_RDO "D:\txt\rdo.txt"
#define LOGPATH_EC "D:\txt\ec.txt"
#define LOGPATH_EC_SUMMARY "D:\txt\ec_summary.txt"
#define LOGPATH_FDB "D:\txt\fdb.txt"
#define LOGPATH_FDBRES "D:\txt\HMfdbres.txt"
#define LOGPATH_PRED "D:\txt\predykcja.txt"

#define		FORWARD_TRANSFORM_LOGGING_ON											1
#define		FORWARD_TRANSFORM_PRINT_BLOCK			FORWARD_TRANSFORM_LOGGING_ON &&	1
#define		FORWARD_TRANSFORM_PRINT_HORIZONTAL		FORWARD_TRANSFORM_LOGGING_ON &&	1
#define		FORWARD_TRANSFORM_PRINT_VERTICAL 		FORWARD_TRANSFORM_LOGGING_ON &&	1
#define		FORWARD_TRANSFORM_INCLUDE_DETAILS 		FORWARD_TRANSFORM_LOGGING_ON &&	1

#define		INVERSE_TRANSFORM_LOGGING_ON											1
#define		INVERSE_TRANSFORM_PRINT_BLOCK			INVERSE_TRANSFORM_LOGGING_ON && 1
#define		INVERSE_TRANSFORM_PRINT_HORIZONTAL		INVERSE_TRANSFORM_LOGGING_ON && 1
#define		INVERSE_TRANSFORM_PRINT_VERTICAL		INVERSE_TRANSFORM_LOGGING_ON && 1
#define		INVERSE_TRANSFORM_INCLUDE_DETAILS		INVERSE_TRANSFORM_LOGGING_ON && 1

#define		QUANT_LOGGING_ON														1
#define		QUANT_INCLUDE_DETAILS					QUANT_LOGGING_ON &&				1
#define		QUANT_PRINT_INPUT						QUANT_LOGGING_ON &&				1
#define		QUANT_PRINT_OUTPUT						QUANT_LOGGING_ON &&				1
#define		QUANT_PRINT_QUANT_COEFF					QUANT_LOGGING_ON &&				1
#define		QUANT_PRINT_OUTPUT_AFTER_BIT_HIDING		QUANT_LOGGING_ON &&				1

#define		DEQUANT_LOGGING_ON														1
#define		DEQUANT_INCLUDE_DETAILS					DEQUANT_LOGGING_ON &&			1
#define		DEQUANT_PRINT_INPUT						DEQUANT_LOGGING_ON &&			1
#define		DEQUANT_PRINT_OUTPUT					DEQUANT_LOGGING_ON &&			1

#define		LUMA_PRED_LOGGING_ON													1
#define		LUMA_PRED_PRINT_BLOCK					LUMA_PRED_LOGGING_ON &&			1
#define		LUMA_PRED_PRINT_PREDICTION				LUMA_PRED_LOGGING_ON &&			1
#define		LUMA_PRED_PRINT_RESIDUALS				LUMA_PRED_LOGGING_ON &&			1

#define		LUMA_RECO_LOGGING_ON													1
#define		LUMA_RECO_PRINT_PREDICTION				LUMA_RECO_LOGGING_ON &&			1
#define		LUMA_RECO_PRINT_RESIDUALS				LUMA_RECO_LOGGING_ON &&			1
#define		LUMA_RECO_PRINT_RECONSTRUCTED			LUMA_RECO_LOGGING_ON &&			1

#define		CHROMA_PRED_LOGGING_ON													1
#define		CHROMA_PRED_PRINT_BLOCK					CHROMA_PRED_LOGGING_ON &&		1
#define		CHROMA_PRED_PRINT_PREDICTION			CHROMA_PRED_LOGGING_ON &&		1
#define		CHROMA_PRED_PRINT_RESIDUALS				CHROMA_PRED_LOGGING_ON &&		1

#define		CHROMA_RECO_LOGGING_ON													1
#define		CHROMA_RECO_PRINT_PREDICTION			CHROMA_RECO_LOGGING_ON &&		1
#define		CHROMA_RECO_PRINT_RESIDUALS				CHROMA_RECO_LOGGING_ON &&		1
#define		CHROMA_RECO_PRINT_RECONSTRUCTED			CHROMA_RECO_LOGGING_ON &&		1


#if FORWARD_TRANSFORM_PRINT_BLOCK
#define		LOG_FT_BLOCK(x) (LOG(LOGGER_FORWARD_TRANSFORM) << x)
#else
#define		LOG_FT_BLOCK(x)
#endif
#if FORWARD_TRANSFORM_PRINT_HORIZONTAL
#define		LOG_FT_HOR(x) LOG(LOGGER_FORWARD_TRANSFORM) << x
#else
#define		LOG_FT_HOR(x)
#endif
#if FORWARD_TRANSFORM_PRINT_VERTICAL
#define		LOG_FT_VER(x) LOG(LOGGER_FORWARD_TRANSFORM) << x
#else
#define		LOG_FT_VER(x)
#endif
#if FORWARD_TRANSFORM_INCLUDE_DETAILS
#define		LOG_FT_DETAILS(x) LOG(LOGGER_FORWARD_TRANSFORM) << x
#else
#define		LOG_FT_DETAILS(x)
#endif

#if INVERSE_TRANSFORM_PRINT_BLOCK
#define		LOG_IT_BLOCK(x) LOG(LOGGER_INVERSE_TRANSFORM) << x
#else
#define		LOG_IT_BLOCK(x)
#endif
#if INVERSE_TRANSFORM_PRINT_HORIZONTAL
#define		LOG_IT_HOR(x) LOG(LOGGER_INVERSE_TRANSFORM) << x
#else
#define		LOG_IT_HOR(x)
#endif
#if INVERSE_TRANSFORM_PRINT_VERTICAL
#define		LOG_IT_VER(x) LOG(LOGGER_INVERSE_TRANSFORM) << x
#else
#define		LOG_IT_VER(x)
#endif
#if INVERSE_TRANSFORM_INCLUDE_DETAILS
#define		LOG_IT_DETAILS(x) LOG(LOGGER_INVERSE_TRANSFORM) << x
#else
#define		LOG_IT_DETAILS(x)
#endif

#if QUANT_INCLUDE_DETAILS
#define		LOG_QUANT_BLOCK(x) LOG(LOGGER_QUANTIZATION) << x
#else
#define		LOG_QUANT_BLOCK(x)
#endif
#if QUANT_PRINT_INPUT
#define		LOG_QUANT_HOR(x) LOG(LOGGER_QUANTIZATION) << x
#else
#define		LOG_QUANT_HOR(x)
#endif
#if QUANT_PRINT_OUTPUT
#define		LOG_QUANT_VER(x) LOG(LOGGER_QUANTIZATION) << x
#else
#define		LOG_QUANT_VER(x)
#endif
#if QUANT_PRINT_QUANT_COEFF
#define		LOG_QUANT_DETAILS(x) LOG(LOGGER_QUANTIZATION) << x
#else
#define		LOG_QUANT_DETAILS(x)
#endif
#if QUANT_PRINT_OUTPUT_AFTER_BIT_HIDING
#define		LOG_QUANT_DETAILS(x) LOG(LOGGER_QUANTIZATION) << x
#else
#define		LOG_QUANT_DETAILS(x)
#endif

#if DEQUANT_INCLUDE_DETAILS
#define		LOG_IQ_DETAILS(x) LOG(LOGGER_DEQUANTIZATION) << x
#else
#define		LOG_IQ_DETAILS(x)
#endif
#if DEQUANT_PRINT_INPUT
#define		LOG_IQ_INPUT(x) LOG(LOGGER_DEQUANTIZATION) << x
#else
#define		LOG_IQ_INPUT(x)
#endif
#if DEQUANT_PRINT_OUTPUT
#define		LOG_IQ_OUTPUT(x) LOG(LOGGER_DEQUANTIZATION) << x
#else
#define		LOG_IQ_OUTPUT(x)
#endif

#if LUMA_PRED_PRINT_BLOCK
#define		LOG_LUMAPRED_BLOCK(x) LOG(LOGGER_LUMA_PREDICTION) << x
#else
#define		LOG_LUMAPRED_BLOCK(x)
#endif
#if LUMA_PRED_PRINT_PREDICTION
#define		LOG_LUMAPRED_PREDICTION(x) LOG(LOGGER_LUMA_PREDICTION) << x
#else
#define		LOG_LUMAPRED_PREDICTION(x)
#endif
#if LUMA_PRED_PRINT_RESIDUALS
#define		LOG_LUMAPRED_BLOCK(x) LOG(LOGGER_LUMA_PREDICTION) << x
#else
#define		LOG_LUMAPRED_BLOCK(x)
#endif

#if LUMA_RECO_PRINT_RECONSTRUCTED
#define		LOG_LUMARECO_RESULT(x) LOG(LOGGER_LUMA_RECONSTRUCTION) << x
#else
#define		LOG_LUMARECO_RESULT(x)
#endif
#if LUMA_RECO_PRINT_PREDICTION
#define		LOG_LUMARECO_PREDICTION(x) LOG(LOGGER_LUMA_RECONSTRUCTION) << x
#else
#define		LOG_LUMARECO_PREDICTION(x)
#endif
#if LUMA_RECO_PRINT_RESIDUALS
#define		LOG_LUMARECO_RESIDUALS(x) LOG(LOGGER_LUMA_RECONSTRUCTION) << x
#else
#define		LOG_LUMARECO_RESIDUALS(x)
#endif

#if CHROMA_PRED_PRINT_BLOCK
#define		LOG_CHROMAPRED_BLOCK(x) LOG(LOGGER_CHROMA_PREDICTION) << x
#else
#define		LOG_CHROMAPRED_BLOCK(x)
#endif
#if CHROMA_PRED_PRINT_PREDICTION
#define		LOG_CHROMAPRED_PREDICTION(x) LOG(LOGGER_CHROMA_PREDICTION) << x
#else
#define		LOG_CHROMAPRED_PREDICTION(x)
#endif
#if CHROMA_PRED_PRINT_RESIDUALS
#define		LOG_CHROMAPRED_BLOCK(x) LOG(LOGGER_CHROMA_PREDICTION) << x
#else
#define		LOG_CHROMAPRED_BLOCK(x)
#endif

#if CHROMA_RECO_PRINT_RECONSTRUCTED
#define		LOG_CHROMARECO_RESULT(x) LOG(LOGGER_CHROMA_RECONSTRUCTION) << x
#else
#define		LOG_CHROMARECO_RESULT(x)
#endif
#if CHROMA_RECO_PRINT_PREDICTION
#define		LOG_CHROMARECO_PREDICTION(x) LOG(LOGGER_CHROMA_RECONSTRUCTION) << x
#else
#define		LOG_CHROMARECO_PREDICTION(x)
#endif
#if CHROMA_RECO_PRINT_RESIDUALS
#define		LOG_CHROMARECO_RESIDUALS(x) LOG(LOGGER_CHROMA_RECONSTRUCTION) << x
#else
#define		LOG_CHROMARECO_RESIDUALS(x)
#endif



#endif